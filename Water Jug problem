graph= {
    "A" : ['B','C'],
    "B" : ['D', 'E'],
    "D" : ['G', 'B'],
    "C" : ['E', 'F'],
    "E" : ['B', 'C'],
    "F" : ['C', 'H'],
    "G" : ['I'],
    "I" : ['J'],
    "H" : ['K'],
    "K" : ['L'],
    "L" : ['M'],
    "M" : ['N'],
    "J" : [],
    "N" : []
}
label= {
    "A" : [0,0],
    "B" : [0,3],
    "C" : [4,0],
    "D" : [3,0],
    "E" : [4,3],
    "F" : [1,3],
    "G" : [3,3],
    "H" : [1,0],
    "I" : [4,2],
    "J" : [0,2],
    "K" : [0,1],
    "L" : [4,1],
    "M" : [2,3],
    "N" : [2,0]
}
node = label
queue = []
visited = []
goal = ['J', 'N']
def fuction(visited,graph,node) :
    print("OKAY")
    visited.append(node)
    queue.append(node)
    while queue:
        s = queue.pop(0)
        print(s, end=" ")
        print(label[s])
        if s in goal:
            print("Reached")
            return
        for neighbour in graph[s] :
            if neighbour not in visited :
                visited.append(neighbour)
                queue.append(neighbour)
    print("done")
    
fuction(visited,graph,'A')
